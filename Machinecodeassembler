import re
str1=input("Instruction: ")
str1=str1.upper()
query=re.split(" |,",str1)

B3216=["EAX","EBX","ECX","EDX","AX","BX","CX","DX","BP","SI","DI"]

B8=["AL","AH","BH","BL","CH","CL","DH","DL"]


formats=["OP","D","W","MOD","REG","R/M","Disp","Imm"]

REG1={"AL":"000","CL":"001","DL":"010","BL":"011","AH":"100","CH":"101","DH":"110","BH":"111"}

REG2={"AX":"000","CX":"001","DX":"010","BX":"011","SP":"100","BP":"101","SI":"110","DI":"111"}

RM00={"[BX+SI]":"000","[BX+DI]":"001","[BP+SI]":"010","[BP+DI]":"011","[SI]":"100","[DI]":"101","[DIRECT]":"110","[BX]":"111"}

RM01={"[BX+SI+D8]":"000","[BX+DI+D8]":"001","[BP+SI+D8]":"010","[BP+DI+D8]":"011","[SI+D8]":"100","[DI+D8]":"101","[BP+D8]":"110","[BX+D8]":"111"}

RM10={"[BX+SI+D16]":"000","[BX+DI+D16]":"001","[BP+SI+D16]":"010","[BP+DI+D16]":"011","[SI+D16]":"100","[DI+D16]":"101","[BP+D16]":"110","[BX+D16]":"111"}

MOD={"NO":"00","8B":"01","16B":"10","REG":"11"}

opcodes={"MOV":"100010"}

HEX={"0":"0000","1":"0001","2":"0010","3":"0011","4":"0100","5":"0101","6":"0110","7":"0111","8":"1000","9":"1001","A":"1010","B":"1011","C":"1100","D":"1101","E":"1110","F":"1111"}
RPM=["BX","SI","DI","BP"]


def findMOD():
    count=-1
    msg=False
    for ins in query:
        count+=1
        if (ins.find("[")!=-1):
            msg=True
            break
    if msg:
        temp=query[count][1:len(query[count])-1]
        if query[count].find("+")!=-1:
            q1=temp.split("+")
            if q1[len(q1)-1] in RPM:
                formats[3]=MOD["NO"]
            else:
                if len(q1[len(q1)-1].lstrip("0"))==2:

                    formats[3]=MOD["8B"]
                else:
                    formats[3]=MOD["16B"]
                if q1[len(q1)-1] not in RPM:
                    for i in q1[len(q1)-1].lstrip("0"):
                        try:
                            formats[6]+=HEX[i]
                        except Exception as e:
                            return False
        else:
            formats[3]=MOD["NO"]
    else:
        formats[3]=MOD["REG"]
    return True


def if11():
    if (formats[1]=="0"):
        formats[4]=REG1[query[1]]
        try:
            formats[5]=REG1[query[2]]
        except Exception:
            formats[5]="000"
    if (formats[1]=="1"):
        formats[4]=REG2[query[1]]
        try:
            formats[5]=REG2[query[2]]
        except Exception:
            formats[5]="000"

def ifnot11():
    if (formats[1]==0):
        mem=query[2]
        reg=query[1]
    else:
        mem=query[1]
        reg=query[2]
    return True


    if ((formats[7]!="Imm" and formats[1]=="1") or formats[7]=="Imm"):
        if (formats[2]=="1"):
                formats[4]=REG2[reg]
        else:
                formats[4]=REG1[reg]

    if ((formats[7]!="Imm" and formats[1]=="0") or formats[7]=="Imm"):
        q1=mem[1:len(mem)-1].split("+")
        if formats[3]=="00":
            try:
                formats[5]=RM00[mem]
            except Exception:
                formats[5]=RM00["[DIRECT]"]
                formats[6]=mem[1:len(mem)-1]+"H"
        elif formats[3]=="01":
            try:
                formats[5]=RM01[mem]
            except Exception:
                try:
                    q1[len(q1)-1]="D8"
                    mem="+".join(q1)
                    formats[5]=RM01[f"[{mem}]"]
                except Exception as e:
                    return False
        else:
            try:
                formats[5]=RM10[mem]
            except Exception:
                try:
                    q1[len(q1)-1]="D16"
                    mem="+".join(q1)
                    formats[5]=RM01[f"[{mem}]"]
                except Exception as e:
                    return False
    return True
    

def findD():
    if (query[1].find("[")!=-1):
        formats[1]="0"
    else:
        formats[1]="1"

def findw():
    for i in B3216:
        if query[1].find(i)!=0:
            formats[2]="1"
            break

    if query[2]=="W":
        for i in B8:
            if query[1].find(i)!=0 or query[2].find(i)!=0:
                formats[2]="0"
                break

def Immediate():
        if query[2].find("[")==-1 and query[2][1].upper() not in ["X","H","L","I","P"]:
            formats[7]=query[2]+"H"


def error():
    if query[2].find("[")!=-1 and query[1].find("[")!=-1:
        print("Memory to Memory transfer Not supported")
        return False
    if ((query[2].find("[")==-1 and query[1].find("[")==-1)):
        if (query[1].find("X")!=-1):
            if (query[2].find("X")==-1):
                print("Different Size registers Not supported")
                return False
        elif (query[1].find("H")!=-1 or query[1].find("L")!=-1):
            if (query[2].find("H")==-1 or query[2].find("L")==-1):
                print("Different Size registers Not supported")
                return False
    return True


if error():
    formats[0]=opcodes[query[0]]
    findD()
    findw()
    torf=findMOD()
    if (torf):
        Immediate()

        if formats[3]=="11":
            q1=if11()
        else:
            q1=ifnot11()

        if formats[4]=="REG":
            formats[4]="000"

        if formats[5]=="R/M":
            formats[5]="000"
        if (q1):
            print(formats)
        else:
            print("Incorrect Command")
    else:
        print("Incorrect Registers")

